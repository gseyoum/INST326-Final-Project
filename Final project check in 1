import pygame
import os
import time
import random
pygame.font.init()

"""the pygame functions/syntax were obtained from https://www.pygame.org/docs/"""

width, height = 1000, 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption("Space Shooter Tutorial")


#Player's Ship
player_ss = pygame.image.load(os.path.join("images", "player_ship.png"))

#Enemy Ships

#Colored Attacks
player_laser = pygame.image.load(os.path.join("images", "red_laser.png"))

#Background
background = pygame.transform.scale(pygame.image.load(os.path.join("images", "background.png")), (width, height))

#General Class that we will be able to inherit code from later
class Ship:
    """Abstract base class for space invader ships. 
    
    Attributes:
        pos_x (int): the ships current x position
        pos_y (int): the ships current y position
        health (int): health of ship is set to 1000
    """
    def __init__(self, pos_x, pos_y, ship_health = 1000):
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.ship_health = ship_health
        self.ship_img = None
        self.attacks_img = None
        self.attacks = []
        self.over_heat_counter = 0

    def draw(self, window):
        """draws the player ship"""
        pygame.draw.rect(window, (0,255,0), (self.pos_x, self.pos_y, 40, 40), 5)

    def overheat(self):
        if self.over_heat_counter >= self.overheat:
            self.over_heat_counter = 0
        elif self.over_heat_counter > 0:
            self.over_heat_counter += 1

    def shoot(self):
        if self.over_heat_counter == 0:
            attack = Attack(self.pos_x, self.pos_y, self.attacks_img)
            self.attacks.append(attck)
            self.over_heat_counter = 1

#class Player(Ship):
    """This is the player class that will take the attributes from the ship Class.  
    This class will have all the functions a player ship can do """
    #def __init__(self, pos_x, pos_y, health=1000):
        super().__init__(pos_x, pos_y, health)
        self.ship_img = player_ss
        self.attacks_img = player_laser
        self.mask = pygame.mask.from_surface(self.ship_img)
        self.max_health = health
    
    #def draw(self, window):
        """This allows for a health bar to be drawn on the player ship 
        Args:
            window(window): the screen in which the game will be played on.
        """
        super().draw(window)
        self.healthbar(window)
    
    #def healthbar(self, window):
        """This creates the physically creates the player ships health bar 
        Args:
            window(window): the screen in which the game will be played on.
        """
        pygame.draw.rect(window, (255,0,0), (self.pos_x, self.pos_y + self.ship_img.get_height() + 5, self.ship_img.get_width(), 5))
        pygame.draw.rect(window, (0,255,0), (self.pos_x, self.pos_y + self.ship_img.get_height() + 5, self.ship_img.get_width() * (self.health/self.max_health), 5))


    #def scoreboard(self, points)
        """This creates a scoreboard that logs the top 10 point scorers and 
        removes scores once they are beat.  We will read and write to a file to 
        save these top scores
        Args:
            points(int): Keeps track of the number of points you get before the game ends
        """

    #def move_attacks(self, speed, objects):
        """This will allow for the player ship to attack enemies.
        Args:
            speed(int): the speed at which the attacks are moving
            objects(enemies): the enemies on the board
        """
        self.overheat()
        for attck in self.attacks:
            atack.move(speed)
            if attack.off_screen(HEIGHT):
                self.attacks.remove(attack)
            elif attack.collision(objects):
                objects.health -= 10
                self.attacks.remove(attack)
     #def bar_health(health_user, health_enemy):
        if health_user>30:
            health_user_color=red
        
        if health_enemy>30:
            health_enemy_color=red
        
        pygame.draw.rect(gameDisplay, health_user_color,(700,30, health_user, 30))
        pygame.draw.rect(gameDisplay, enemy_user_color,(25,30, health_enemy, 30))

#class Enemy(Ship):
    """This is the enemy class that will take the attributes from the ship Class.  
    This class will have all the functions an enemy ship can do """
    #def __init__(self, pos_x, pos_y, health=1000):
        super().__init__(pos_x, pos_y, health)
        self.mask = pygame.mask.from_surface(self.ship_img)
        
    #def move(self, speed)
        """this will show how the enemy ships are able to 
        move down (zigzag pattern instead of normally going straight downwards.)
        Args:
            speed(int): how fast the enemy is able to move
        """
        self.pos_y += speed

    #def shoot(self):
        """This will show how enemy ships are able to attack """
        if self.over_heat_counter == 0:
            attack = Attck(self.pos_x-20, self.pos_y, self.attacks_img)
            self.attcks.append(attck)
            self.over_heat_counter = 1


def main():
    run = True
    frames_per_sec = 60
    life = 10
    lvl = 0
    font = pygame.font.SysFont("arial", 20)
    lose_font = pygame.font.SysFont("arial", 40)
    player_speed = 100
    ship = Ship(500, 500)
    enemies = []
    enemy_speed = 1
    lose = False
    lose_counter = 0

    clock = pygame.time.Clock()


    def redraw_window():
        window.blit(background, (0,0))
        #draw text to stay on background
        label_level = font.render(f"Level: {lvl}", 1, (255, 255, 255))  #rbg color codes
        label_life = font.render(f"Lives: {life}", 1, (255,255,255))

        window.blit(label_level, (10, 40))
        window.blit(label_life, (10, 10))

        for enemy in enemies:
            enemy.draw(window)

        ship.draw(window)

        if lose:
            lose_tag = lose_font.render("Game Over!", 1, (255, 255, 255))
            window.blit(lose_tag, (width/2 - lose_tag.get_width()/2, 200))


        pygame.display.update()

    while run:
        clock.tick(frames_per_sec)

        redraw_window()

        if life <= 0 or player.health <= 0:
            lose = True
            lose_counter += 1

        if lose:
            if lose_counter > frames_per_sec*3:
                run = False
            else:
                continue

        if len(enemies) == 0:
            lvl += 1
            

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            ship.pos_x -= player_speed and ship.pos_x - player_speed > 0
        if keys[pygame.K_RIGHT]:
            ship.pos_x += player_speed and ship.pos_x + player_speed < width
        if keys[pygame.K_DOWN]:
            ship.pos_y += player_speed and ship.pos_y + player_speed < height
        if keys[pygame.K_UP]:
            ship.pos_y -= player_speed and ship.pos_y - player_speed > 0
        

main()

